#ifndef _CORONIUM_HPP_
#define _CORONIUM_HPP_

#include <dirent.h>             // DIR
#include <libgen.h>             // dirname

#include <stdlib.h>             // getenv
#include <string>
#include <vector>

void search_directory (std::string dirname, std::vector<std::string>& files)
{
    DIR* dir = opendir (dirname.c_str());
    struct dirent* dp;
    std::string path;

    if (!dir)
        return;

    while (dp = readdir (dir), dp != nullptr)
    {
        auto entry = std::string (dp->d_name);

        if (entry == "." || entry == "..")
            continue;

        path = (dirname + "/" + entry);

        if (entry != "." && entry != ".." && (entry.find (".sla") != std::string::npos))
            files.push_back (path);

        search_directory (path, files);
    }
    closedir (dir);
}

std::string find_slafile (std::string s, std::string dir = "@SLA_LOCATION@")
{
    std::vector<std::string> sla_list;

    search_directory (dir, sla_list);
    for (auto& i : sla_list)
        if (i.find(s) != std::string::npos)
            return std::string(i);
    return "";
}

// NOTE DO NOT try and return a char const* instead of std::string. Doing so returns null.
#cmakedefine SLA_LOCATION(cpu) []() -> std::string {              \
    char const* env       = getenv("SLA_DIR");                    \
    auto        sla_envir = std::string(env ? env : "");          \
    auto        sla       = #cpu + std::string(".sla");           \
    auto        ret       = sla_envir.empty() ? find_slafile(sla) \
    : find_slafile(sla, sla_envir);                               \
    return ret;                                                   \
}()

#endif
