#ifndef _CORONIUM_HPP_
#define _CORONIUM_HPP_

#include <dirent.h>             // DIR
#include <libgen.h>             // dirname
#include <stdlib.h>             // getenv
#include <string>
#include <vector>

#define CORONIUM_VERSION                        \
    "@PROJECT_VERSION_MAJOR@.@PROJECT_VERSION_MINOR@.@PROJECT_VERSION_PATCH@"

void search_directory (std::string dirname, std::vector<std::string>& files)
{
    DIR* dir = opendir (dirname.c_str ());
    struct dirent* dp;
    std::string path;

    if (!dir)
        return;

    while (dp = readdir (dir), dp != nullptr)
    {
        auto entry = std::string (dp->d_name);

        if (entry == "." || entry == "..")
            continue;

        path = (dirname + "/" + entry);

        if (entry.rfind (".sla") != std::string::npos &&
            entry.rfind (".sla") == (entry.length () - std::string(".sla").length ()))
            files.push_back (path);

        search_directory (path, files);
    }
    closedir (dir);
}

std::string find_slafile (std::string s, std::string dir = "@SLA_LOCATION@")
{
    std::vector<std::string> sla_list;

    search_directory (dir, sla_list);
    for (auto& i : sla_list)
        if (i.find(s) != std::string::npos)
            return std::string(i);
    return "";
}

std::string SLA_LOCATION(std::string cpu)
{
    char const* env = getenv("SLA_DIR");
    auto        sla_envir = std::string(env ? env : "");
    auto        sla       = cpu + std::string(".sla");
    auto        ret       = sla_envir.empty() ? find_slafile(sla)
    : find_slafile(sla, sla_envir);
    return ret;
}

#endif
