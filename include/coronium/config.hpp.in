/* ###
 * @file coronium.hpp
 * @author Joe Staursky
 *
 * @section LICENSE
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @section DESCRIPTION
 *
 * Convenience functions for interacting with the ghidra library.
 */


#ifndef _CORONIUM_HPP_
#define _CORONIUM_HPP_

#include <dirent.h>             // DIR
#include <libgen.h>             // dirname
#include <stdlib.h>             // getenv
#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <cstring>
#include <functional>

#include "sleigh.hh"
#include "loadimage.hh"
#include "xml.hh"
#include "globalcontext.hh"
#include "translate.hh"

#define CORONIUM_VERSION                                                \
	"@PROJECT_VERSION_MAJOR@.@PROJECT_VERSION_MINOR@.@PROJECT_VERSION_PATCH@"

namespace coronium {

std::string find_file (std::string fname, std::string dir);

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


/**
 * @class CPU
 * @brief Primary class for storing + managing processor information.
 */
class CPU
{
    std::string _lang_id {""};
    std::string _cpu {""};
    std::string _cpu_dir {""};

    std::unordered_map<std::string, std::string>
    ldefs {
        {"processor", ""},
        {"endian", ""},
        {"size", ""},
        {"variant", ""},
        {"version", ""},
        {"slafile", ""},
        {"processorspec", ""},
        {"manualindexfile", ""},
        {"id", ""}
    };

    ContextDatabase* context = nullptr;
    DocumentStorage docstorage;
    Element* sleighroot = nullptr;
    Translate* trans = nullptr;
    LoadImage* loader = nullptr;

public:

    CPU (std::string);
    virtual ~CPU() {};

    operator std::string () const { return (_cpu_dir + "/" + _cpu + ".sla"); }
    operator Translate* () const { return trans; }

    auto load(const std::string &f, LoadImage* load = nullptr) -> void;
    auto getArchType() -> std::string { return ldefs["id"]; }

private:

    /**
     * Get the .ldefs filepath.
     *
     * Filepath is retrieved from default location or from the value of the SLA_DIR
     * environment variable.
     */
    auto
    findCpuManifest (std::string cpu) -> std::string

    {
        char const* env = getenv ("SLA_DIR");
        auto sla_envir = std::string (env ? env : "");
        auto sla = cpu + std::string (".ldefs");

        auto ret = sla_envir.empty () ? find_file (sla, "@SLA_LOCATION@")
            : find_file (sla, sla_envir);

        if (ret.empty ()) {
            std::cout << "unable to find .ldefs file" << std::endl;
            exit (EXIT_FAILURE);
        }
        return ret;
    }

    /**
     * Get the sleigh processor definitions from the .ldefs file.
     */
    auto
    setLanguageDefs () -> void;

    /**
     * Find and apply the processorspec (.pspec) context definitions.
     */
    auto
    setContexts (ContextDatabase* cdb) -> void;

};


} // END OF NAMESPACE
#endif
