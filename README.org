* coronium

#+begin_quote
*coronium*: a hypothetical chemical element thought to have been detected in the
solar corona whose spectrum showed a number of lines later identified as
belonging to iron, nickel, and other elements highly ionized at the extreme
solar temperatures.
#+end_quote

Coronium is the ghidra disassembler + decompiler in library form. Made suitable
for use in c++ projects. Usage is as easy as =g++ <your-code>.cpp $(pkg-config
--cflags --libs coronium) -o output>=. None of the Ghidra source code for the
decompiler has been modified. The purpose of this project is to enable
installation of the ghidra c++ source for use as a c++ library. To that end, a
convenience header =coronium.hpp= is provided which holds helper function(s) to
simplify interacting with the ghidra library code.

** Install
#+begin_src shell
  mkdir build
  cd build
  cmake ..               # (alt.) cmake .. -DSLA_LOCATION=<your-directory>
  make -j$(nproc)
  sudo make cpus         # build and install .sla files. Optional if you plan to use SLA_DIR.
  sudo make install      # install headers + lib.
  sudo ldconfig          # make linker recognize lib on path.
#+end_src

Coronium will install =slgh-compile= (i.e., the sleigh compiler), =coronium=
header files and =libcoronium.so=. The cpu specification files (=.sla= files)
will be installed in =/var/coronium= (default location --can change this during
install).

However, if you decide to change/move the cpu directory, just be sure to set the
environment variable =SLA_DIR= to this new location. That way the macro
=SLA_LOCATION()= will still be able to find cpu definitions. The environment
variable =SLA_DIR= is given precedence over whatever path was decided during the
initial install.

*update* .sla files are now searched for recursively inside whatever folder
SLA_DIR points to (or wherever you specified SLA_LOCATION to point to at compile
time). That is, the subfolder hierarchy no longer matters as it did in earlier
versions. You could point SLA_DIR to your top level ghidra folder and
SLA_LOCATION will be able to search and find the correct .sla file.

After installation compile and run the file =test/example_one/example_one.cpp=
to make sure everything is working. If you face an issue please create an issue
so I may fix it. One issue you may face is if you direct =SLA_DIR= to an older
ghidra installation that uses a different sleigh version. To find out, open one
of the compiled .sla files inside your ghidra install and note the field
=<sleigh version= at the top and compare that with an .sla file compiled using
this project. If there is a mismatch, you will need to recompile the ghidra
installed .slaspec files using the sleigh compiler but by this project
=slgh-compile=.

After install you can link to targets with headers such as
#+begin_src c++
  /* main.cpp */
  #include <coronium/coronium.hpp>
  #include <coronium/types.h>
  #include <coronium/loadimage.hh>
  #include <coronium/sleigh.hh>
  #include <coronium/emulate.hh>
  /* ... */
#+end_src

via the cmdline -- =g++ main.cpp -lcoronium -o main=
